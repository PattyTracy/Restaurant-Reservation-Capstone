# Change Log
- All notable changes to this project will be documented in this file.
-
## Goals:
- Create our schedule using a Kanban board.
- - Review:
-   - Robust Architecture
-   - Connecting Postgres
-   - Knex
-   - Deploying an application: Render vs Vercel:
-     are they used together?
-
- - Create our DB's and get the app running
- - We want to be able to visit localhost:3000 to see
-  what the front end looks like
- Deploy our app . . .

# Branches
- Main
-       Worked on User Story #4 until 15/17 tests were passing
-       Had some odd things going on between local and remote repos. There were a lot of untracked changes after merging US-#5 to Main in GitHub. The problem seemed to be that the changes needed to be merged locally after a git pull request.
-       Completed functions for User Story #6.
- db-connection:
-       created db's for dev, test, preview & prod & connected them
-       defined rows in "reservations" table
-       created "tables" table via Knex migrate
-       created seeds file for "tables"
-       seeded "reservations" table
-       confirmed that server runs and DBeaver is connected to db
- US-01: (for User Story #1)
-       created routes for /reservations/new and /reservations pages
-       confirmed that app.js file includes the reservations router
-       added "methodNotAllowed" to errors folder
-       added "asyncErrorBoundary" to errors folder
-       added "hasProperties" to errors folder
-       updated reservations.controller.js and created reservations.service.js
-       seeded "tables" table
- US-#2: (for User Story #2)
-       wrote middleware for validating date in "reservations"
-       continued testing User Story #1; 6 tests still not passing
-       imported 2 functions from front-end/utils/date-time.js 
        to complete GET functions for /reservations route
-       troubleshooting until all tests for US-#1 pass
-       completed 2 functions to validate that the date is in the
        future and is not a Tuesday when the restaurant is closed
- US-#3: (for User Story #3)
-       Writing middleware to confirm time is between 
        10:30-21:30 in "reservations"
-       Created "GET" route for "tables" (actually part of US-#4)
-       Updated "tables" to remove "seat" column and change
        properties of "reservation_id" to default to NULL value
- US-#4: (for User Story #4)
-       Continue working on User Story #4 tests
- US-#5: (for User Story #5)
-       Create DELETE request for /tables/:table_id/seat
-       Repaired corrupt migration files & fixtures/tables
- User#4: (for User Story #4)
-       Completed tests for User Story #4 tests
        by creating a link for the "reservation_id" in "tables"
- US-#6: (for User Story #6)
-       Created a new migration file to add a "status" column to the
        "reservations" table
-       Ran new migration in development, test, preview, and
        production environments
-       All environments are seeded with data
- rate:
        Added rate limiter function to app.js to resolve GitHub error/alert
- US-#7: (for User Story #7)
        Modified reservations.controller "list" function to check for a
        mobile_number query and if so, to use the given (from ReadMe) 
        "search" function in reservations.service to search for reservations 
        with a given phone number.
- US-#8: (for User Story #8)
- F-US-#2: (fron end for User Story #2)
- issues-#x: created to correct issues with User Stories 4, 5 and 6 that
        emerged after the back end files were completed. Also renamed 
        the "update" and "edit" functions in the reservations table
        to "updateStatus" and "update" for clarity.
- F-US-#1 (F for front end, User Story #1)
-       Wrote component NewReservation to create and save a new reservation. Also wrote a ReservationForm component that can be re-used that has the form with input fields. This can be used for create reservation, update reservation, and change status.
-        Created previous, today and next buttons on dashboard. They work locally but I'm unable to run tests.
- F-US-#2: (front end for User Story #2)
- F-Revising-1, 12/12/23: Still unable to run front-end tests. Test 1 on backend is now failing & needs to be fixed. 
Updated 1/2/24: all back-end unit tests passing.
Started working on user story 4, Seat Reservation. New tables function works but need to display tables on dashboard and add free/occupied status to each table. Also need seat button next to each reservation (add to ReservationView).
To run the front-end tests, try starting up the server on its own, letting it get warmed up, then running the front-end tests separately using the commands in /front-end/package.json file.
- F-US-#4: corrected table alignment for Reservations in Dashboard
- F-US-#5: began Seat function
- F-Seat: Seat Reservation buttons and functionality
        - Created /reservations/:reservationId/seat page
        - Created api function updateTable() to PUT
          reservation_id to a table to seat a booked reservation
        - Submit, Cancel buttons working as expected
-  F-US-#5 (for user story 5): "Finish" reservation
        - A "Seat" button only displays for a reservation
          with status "Booked", and a "Booked" reservation
          displays a "Finish" button. Reservations that are
          not "Booked" or "Finished" will not display.
        - Table list is refreshed after a reservation is
          either "Booked" or "Finished."
- F-US-#6: user story #6 - add status column for each reservation 
  on the dashboard. Only "booked" and "seated" columns display.
- F-US-#7: user story #7 - created Search feature to allow a
        search by mobile number. Search will display a reservation 
        with a mobile number matching any part of the input.
        - If no numbers in the reservations table match any
          part of the input, "No reservations found" is returned.
          If any numbers are found, they are returned and
          displayed in the same table format that appears
          on the Dashboard page.
        - On submit, the input form is cleared.
-F-US-#8: user story #8 - add "edit reservation" feature. 
        - An Edit button is displayed on every reservation on both
        Dashboard and Search pages, but is disabled unless
        reservation has status: "booked". Clicking "Edit" allows
        user to update the information in the reservation and
        save the updated data to the database. 
        - A Cancel button is also displayed on every reservation
        on both Dashboard and Search pages, but is disabled unless 
        reservation has status: "booked." Clicking "Cancel" allows
        user to cancel the reservation (changes the status to
        "cancelled") and returns to the previous page.
        - Updated "Finish" button to display in the Tables section
        and be visible only if a table is occupied.
        - Updated "Seat" button to be disabled unless the table has
        status "booked."
-F-Display-Reservations: update Dashboard so that only reservations with
        a status of "booked" or "seated" are displayed.